'use strict';
module.exports = (function() {
    var util = require('util');
    var EventEmitter = require('events').EventEmitter;
    var stdio = require("stdio");

    var onering = function(bin_path, args) {
        this._transport = new stdio.stdioLib(bin_path, args);
        this._rpc = new stdio.jsonrpc(this._transport, "onering");
        var base = this;
        this._rpc.on("connected", function() {
           base.emit("connected");
        });
        this._rpc.on("error", function(error) {
            base.emit("error", error);
        });
    }

    // Inherit event emitter functionality
    util.inherits(onering, EventEmitter);
    
    // Start transport
    onering.prototype.start = function() {
        this._transport.start()
    }


    /**
     * Returns the service api version.
     */
    onering.prototype.get_api_version = function() { return this._rpc.call('get_api_version', {}); }

    /**
     * Returns an object prefilled with all fields pertaining to password entries
     */
    onering.prototype.password = function(fields) { 
   var default_fields = null;
   for (var attrname in fields) { if (typeof fields[attrname] !== 'function') { default_fields[attrname] = fields[attrname];} }
   return default_fields; }

    /**
     * Stores a note object
     */
    onering.prototype.save_note = function(entry) { return this._rpc.call('save_note', {'entry': entry}); }

    /**
     * stops server
     */
    onering.prototype.shutdown = function() { return this._rpc.call('shutdown', {}); }

    /**
     * Stars a session using the provided certificate to encrypt sensitive information.
     */
    onering.prototype.start_session = function(account, pub_key) { return this._rpc.call('start_session', {'account': account, 'pub_key': pub_key}); }

    return onering;
}());
