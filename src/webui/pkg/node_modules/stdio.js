'use strict';
module.exports = (function() {
    var path = require('path')
    var child_process = require('child_process');
    var util = require('util');
    var EventEmitter = require('events').EventEmitter;

    //////////////// JSONRPC 2.0
    var jsonrpc_events = function(rpc) {
        this.rpc = rpc;
    }

    // Inherit event emitter functionality
    util.inherits(jsonrpc_events, EventEmitter);

    jsonrpc_events.prototype.result = function(fn) {
        this.on("result", fn);
        return this;
    }

    jsonrpc_events.prototype.error = function(fn) {
        this.on("error", fn);
        return this;
    }

    var jsonrpc = function(transport, namespace) {
        this.msg_id = 0;
        this.namespace = namespace?namespace+".":"";
        this.msg_events = {}
        this.transport = transport;
        var base = this;
        this.buffer = "";

        this.transport.on("data", function(data_in) {
            data_in = data_in.toString();
            for( var i=0; i < data_in.length; i++) {
                var char = data_in[i];
                
                if (char == "\n") {
                    var data = JSON.parse(base.buffer);
                    //console.log("ON DATA: ", data)
                    base.buffer = ""
                    var msg_evt = null;
                    if (data["id"] !== undefined) {
                        msg_evt = base.msg_events["e"+data["id"]];
                    }
                    if (msg_evt != null) {
                        if (data["result"] !== undefined) {
                            msg_evt.emit("result", data["result"]);
                        } else if (data["error"] !== undefined) {
                            msg_evt.emit("error", data["error"]);
                        } else {
                            base.emit("error", {"error": "UNHANDLED", "data": data});
                        }
                        delete base.msg_events["e"+data["id"]];
                    } else {
                        if (data["error"] !== undefined) {
                            base.emit("error", data['error']);
                        }
                    }
                } else {
                    base.buffer += char;
                }
            }
        });
        this.transport.on("error", function(data) {
            console.log("On transport error", data.toString());
            base.emit("error", data);
        });
        this.transport.on("close", function(code) {
            base.emit("disconnected", base, code);
        });
        this.transport.on("open", function(transport) {
            base.emit("connected", base);
        });
    };

    // Inherit event emitter functionality
    util.inherits(jsonrpc, EventEmitter);

    jsonrpc.prototype.call = function(method, params, on_result, on_error) {
        this.msg_id++;
        var data = JSON.stringify({
            "jsonrpc":"2.0",
            "method": this.namespace+method,
            "params": params,
            "id": this.msg_id
        }) + "\n";
        var evt = new jsonrpc_events(this)
        this.msg_events["e"+this.msg_id] = evt;
        this.transport.send(data);
        return evt;
    }

    ////////// STDIO Transport Lib
    var stdioLib = function(bin_path, args) {
        this.bin_path = path.resolve(bin_path);
        this.bin_args = args
        EventEmitter.call(this);
    };

    // Inherit event emitter functionality
    util.inherits(stdioLib, EventEmitter);

    stdioLib.prototype.send = function(data) {
        this.child.stdin.write(data);
    }

    stdioLib.prototype.start = function() {
        this.child = child_process.spawn(this.bin_path, this.bin_args);
        this.started = true;
        var base = this;

        this.child.stdout.on('data', function(data) {
            //console.log(":stdout", data);
            base.emit("data", data);
        });
        this.child.stderr.on('data', function(data) {
            //console.log(":stderr", data);
            base.emit("error", data);
        });
        this.child.stdout.on('exit', function(code) {
            //console.log(":exit", code);
            base.emit("close", code);
        });
        this.child.on('close', function(code) {
            //console.log(":close", code)
            base.emit("close", code);
        });
        this.child.on('disconnect', function(code) {
            console.log(":disconnect", code)
        });
        this.emit("open", this);
    };

    return {
        stdioLib: stdioLib,
        jsonrpc: jsonrpc
    };
}());

